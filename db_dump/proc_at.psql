-- Calculate MUT
CREATE OR REPLACE FUNCTION calc_mu(cid INT) RETURNS INTEGER AS $$
   DECLARE
      mu INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO mu
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'MU';
      RETURN mu;
   END;
$$ LANGUAGE plpgsql;

-- Calculate Klugheit
CREATE OR REPLACE FUNCTION calc_kl(cid INT) RETURNS INTEGER AS $$
   DECLARE
      kl INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO kl
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'KL';
      RETURN kl;
   END;
$$ LANGUAGE plpgsql;

-- Calculate Intuition
CREATE OR REPLACE FUNCTION calc_in(cid INT) RETURNS INTEGER AS $$
   DECLARE
      mu INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO mu
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'IN';
      RETURN mu;
   END;
$$ LANGUAGE plpgsql;

-- Calculate Charisma
CREATE OR REPLACE FUNCTION calc_ch(cid INT) RETURNS INTEGER AS $$
   DECLARE
      ch INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO ch
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'CH';
      RETURN ch;
   END;
$$ LANGUAGE plpgsql;

-- Calculate Fingerfertigkeit
CREATE OR REPLACE FUNCTION calc_ff(cid INT) RETURNS INTEGER AS $$
   DECLARE
      ff INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO ff
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'FF';
      RETURN ff;
   END;
$$ LANGUAGE plpgsql;

-- Calculate Gewandheit
CREATE OR REPLACE FUNCTION calc_ge(cid INT) RETURNS INTEGER AS $$
   DECLARE
      ge INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO ge
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'GE';
      RETURN ge;
   END;
$$ LANGUAGE plpgsql;

-- Calculate Konstitution
CREATE OR REPLACE FUNCTION calc_ko(cid INT) RETURNS INTEGER AS $$
   DECLARE
      ko INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO ko
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'KO';
      RETURN ko;
   END;
$$ LANGUAGE plpgsql;

-- Calculate Korperkraft
CREATE OR REPLACE FUNCTION calc_kk(cid INT) RETURNS INTEGER AS $$
   DECLARE
      kk INT;
   BEGIN
      SELECT COALESCE(base, 0) + COALESCE(modifier, 0) + COALESCE(zugekauft, 0) INTO kk
      FROM   character_eigenschaften, traits
      WHERE  character = cid AND
             traits.id = character_eigenschaften.eigenschaft AND
             traits.abbr = 'KK';
      RETURN kk;
   END;
$$ LANGUAGE plpgsql;

-- calculate INI
CREATE OR REPLACE FUNCTION calc_ini(cid INT) RETURNS INTEGER AS $$
   DECLARE
      my_ini INT;
   BEGIN
      SELECT ROUND( (calc_mu(cid) * 2 + calc_in(cid) + calc_ge(cid)) / 5.0 ) INTO my_ini;
      RETURN my_ini;
   END;
$$ LANGUAGE plpgsql;

-- Stored procedure to calculate AT
CREATE OR REPLACE FUNCTION calc_at(cid INT) RETURNS INTEGER AS $$
   DECLARE
      my_at INT;
   BEGIN
      SELECT ROUND((calc_mu(cid) + calc_ge(cid) + calc_kk(cid)) / 5.0) INTO my_at;
      RETURN my_at;
   END;
$$ LANGUAGE plpgsql;

-- Stored procedure to calculate PA
CREATE OR REPLACE FUNCTION calc_pa(cid INT) RETURNS INTEGER AS $$
   DECLARE
      my_pa INT;
   BEGIN
      SELECT ROUND((calc_in(cid) + calc_ge(cid) + calc_kk(cid)) / 5.0) INTO my_pa;
      RETURN my_pa;
   END;
$$ LANGUAGE plpgsql;

-- Calculate kk-bonus
CREATE OR REPLACE FUNCTION kk_bonus(cid INT, tpkk VARCHAR) RETURNS INTEGER AS $$
   DECLARE
      my_kk INT;
      start INT;
      step  INT;
      bonus INT;
   BEGIN
      start = split_part(tpkk, '/', 1);
      step  = split_part(tpkk, '/', 2);
      bonus = 0;
      SELECT calc_kk(cid) - start INTO my_kk;
      WHILE my_kk >= step LOOP
         bonus = bonus + 1;
         my_kk = my_kk - step;
      END LOOP;
      RETURN bonus;
   END;
$$ LANGUAGE plpgsql;